trigger:
  - main

variables:
  - group: TerraformBackendConfig

pool:
  name: Default  # Use your self-hosted agent pool

stages:

- stage: TerraformInit
  jobs:
    - job: Init
      steps:
        - checkout: self

        - task: TerraformInstaller@1
          inputs:
            terraformVersion: 'latest'

        - task: TerraformTaskV4@4
          displayName: 'Terraform Init'
          inputs:
            provider: 'azurerm'
            command: 'init'
            workingDirectory: '$(System.DefaultWorkingDirectory)'
            backendServiceArm: '$(serviceConnection)'
            backendAzureRmResourceGroupName: '$(backendResourceGroup)'
            backendAzureRmStorageAccountName: '$(backendStorageAccount)'
            backendAzureRmContainerName: '$(backendContainer)'
            backendAzureRmKey: '$(backendStateFile)'

- stage: TerraformValidateAndPlan
  dependsOn: TerraformInit
  jobs:
    - job: ValidateAndPlan
      steps:
        - checkout: self

        - task: TerraformInstaller@1
          inputs:
            terraformVersion: 'latest'

        - task: TerraformTaskV4@4
          displayName: 'Terraform Validate'
          inputs:
            provider: 'azurerm'
            command: 'validate'
            workingDirectory: '$(System.DefaultWorkingDirectory)'
            environmentServiceNameAzureRM: '$(serviceConnection)'

        - task: TerraformTaskV4@4
          displayName: 'Terraform Plan'
          inputs:
            provider: 'azurerm'
            command: 'plan'
            workingDirectory: '$(System.DefaultWorkingDirectory)'
            commandOptions: '-var-file=terraform.tfvars -out=tfplan.binary'
            environmentServiceNameAzureRM: '$(serviceConnection)'

        - publish: $(System.DefaultWorkingDirectory)/tfplan.binary
          artifact: terraform-plan

- stage: TerraformApply
  dependsOn: TerraformValidateAndPlan
  jobs:
    - deployment: ApplyDeployment
      displayName: 'Apply Terraform Plan'
      environment: dev  # This is where you configure manual approval in UI
      strategy:
        runOnce:
          deploy:
            steps:
              - checkout: self

              - task: TerraformInstaller@1
                inputs:
                  terraformVersion: 'latest'

              - download: current
                artifact: terraform-plan
                displayName: 'Download Terraform Plan Artifact'

              - task: TerraformTaskV4@4
                displayName: 'Terraform Apply'
                inputs:
                  provider: 'azurerm'
                  command: 'apply'
                  workingDirectory: '$(Pipeline.Workspace)/terraform-plan'
                  commandOptions: 'tfplan.binary'
                  environmentServiceNameAzureRM: '$(serviceConnection)'
