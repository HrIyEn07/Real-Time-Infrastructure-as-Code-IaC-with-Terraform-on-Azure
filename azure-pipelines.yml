trigger:
  - main

variables:
  - group: TerraformBackendConfig

pool:
  vmImage: 'ubuntu-latest'

stages:
  # STAGE 1: Terraform Init (with backend) & publish modules/providers
  - stage: TerraformInit
    displayName: 'Terraform Init Stage'
    jobs:
      - job: Init
        displayName: 'Terraform Init Job'
        steps:
          - checkout: self

          - task: TerraformInstaller@1
            displayName: 'Install Terraform'
            inputs:
              terraformVersion: 'latest'

          - task: TerraformTaskV4@4
            displayName: 'Terraform Init (with backend)'
            inputs:
              provider: 'azurerm'
              command: 'init'
              workingDirectory: '$(System.DefaultWorkingDirectory)'
              backendServiceArm: '$(serviceConnection)'
              backendAzureRmResourceGroupName: '$(backendResourceGroup)'
              backendAzureRmStorageAccountName: '$(backendStorageAccount)'
              backendAzureRmContainerName: '$(backendContainer)'
              backendAzureRmKey: '$(backendStateFile)'

          - publish: $(System.DefaultWorkingDirectory)/.terraform
            artifact: terraform-init-dir
            displayName: 'Publish .terraform folder'

          - publish: $(System.DefaultWorkingDirectory)/.terraform.lock.hcl
            artifact: terraform-lock
            displayName: 'Publish lock file'

  # STAGE 2: Validate & Plan (restore modules)
  - stage: TerraformValidateAndPlan
    displayName: 'Terraform Validate & Plan'
    dependsOn: TerraformInit
    jobs:
      - job: ValidateAndPlan
        displayName: 'Terraform Validate & Plan Job'
        steps:
          - checkout: self

          - task: TerraformInstaller@1
            displayName: 'Install Terraform'
            inputs:
              terraformVersion: 'latest'

          - download: current
            artifact: terraform-init-dir

          - download: current
            artifact: terraform-lock

          - script: |
              mkdir -p .terraform
              cp -r $(Pipeline.Workspace)/terraform-init-dir/* .terraform/
              cp $(Pipeline.Workspace)/terraform-lock/terraform.lock.hcl .
            displayName: 'Restore Terraform .terraform directory and lock file'

          - task: TerraformTaskV4@4
            displayName: 'Terraform Validate'
            inputs:
              provider: 'azurerm'
              command: 'validate'
              workingDirectory: '$(System.DefaultWorkingDirectory)'
              environmentServiceNameAzureRM: '$(serviceConnection)'

          - task: TerraformTaskV4@4
            displayName: 'Terraform Plan'
            inputs:
              provider: 'azurerm'
              command: 'plan'
              workingDirectory: '$(System.DefaultWorkingDirectory)'
              commandOptions: '-var-file=terraform.tfvars -out=tfplan.binary'
              environmentServiceNameAzureRM: '$(serviceConnection)'

          - publish: $(System.DefaultWorkingDirectory)
            artifact: terraform-plan-$(Build.BuildId)
            displayName: 'Publish Terraform Plan Artifact'

  # STAGE 3: Terraform Apply (re-init with backend for state safety)
  - stage: TerraformApply
    displayName: 'Terraform Apply Stage'
    dependsOn: TerraformValidateAndPlan
    jobs:
      - deployment: Apply
        displayName: 'Terraform Apply Deployment'
        environment: 'dev'
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self

                - task: TerraformInstaller@1
                  displayName: 'Install Terraform'
                  inputs:
                    terraformVersion: 'latest'

                - download: current
                  artifact: terraform-plan-$(Build.BuildId)

                # RE-RUN INIT to ensure backend is configured for apply
                - task: TerraformTaskV4@4
                  displayName: 'Terraform Init (for backend state)'
                  inputs:
                    provider: 'azurerm'
                    command: 'init'
                    workingDirectory: '$(Pipeline.Workspace)/terraform-plan-$(Build.BuildId)'
                    backendServiceArm: '$(serviceConnection)'
                    backendAzureRmResourceGroupName: '$(backendResourceGroup)'
                    backendAzureRmStorageAccountName: '$(backendStorageAccount)'
                    backendAzureRmContainerName: '$(backendContainer)'
                    backendAzureRmKey: '$(backendStateFile)'

                - task: TerraformTaskV4@4
                  displayName: 'Terraform Apply'
                  inputs:
                    provider: 'azurerm'
                    command: 'apply'
                    workingDirectory: '$(Pipeline.Workspace)/terraform-plan-$(Build.BuildId)'
                    commandOptions: 'tfplan.binary'
                    environmentServiceNameAzureRM: '$(serviceConnection)'
