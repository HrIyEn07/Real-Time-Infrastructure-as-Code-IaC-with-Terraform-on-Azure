trigger:
  - main

variables:
  - group: TerraformBackendConfig  # Backend config variable group

pool:
  vmImage: 'ubuntu-latest'

stages:
  # Stage 1: Terraform Init (Module + Provider installation)
  - stage: TerraformInit
    displayName: 'Terraform Init Stage'
    jobs:
      - job: Init
        displayName: 'Terraform Init Job'
        steps:
          - checkout: self

          - task: TerraformInstaller@1
            displayName: 'Install Terraform'
            inputs:
              terraformVersion: 'latest'

          - task: TerraformTaskV4@4
            displayName: 'Terraform Init'
            inputs:
              provider: 'azurerm'
              command: 'init'
              workingDirectory: '$(System.DefaultWorkingDirectory)/'
              environmentServiceNameAzureRM: '$(serviceConnection)'
              backendServiceArm: '$(serviceConnection)'
              backendAzureRmResourceGroupName: '$(backendResourceGroup)'
              backendAzureRmStorageAccountName: '$(backendStorageAccount)'
              backendAzureRmContainerName: '$(backendContainer)'
              backendAzureRmKey: '$(backendStateFile)'

          - publish: $(System.DefaultWorkingDirectory)/.terraform
            artifact: terraform-modules
            displayName: 'Publish Terraform Modules Artifact'

  # Stage 2: Validate and Plan
  - stage: TerraformValidateAndPlan
    displayName: 'Terraform Validate & Plan Stage'
    dependsOn: TerraformInit
    jobs:
      - job: ValidateAndPlan
        displayName: 'Terraform Validate & Plan Job'
        steps:
          - checkout: self

          - download: current
            artifact: terraform-modules
            displayName: 'Download Terraform Modules Artifact'

          - script: |
              mkdir -p .terraform
              cp -r $(Pipeline.Workspace)/terraform-modules/* .terraform/
            displayName: 'Restore .terraform Modules'

          - task: TerraformInstaller@1
            displayName: 'Install Terraform'
            inputs:
              terraformVersion: 'latest'

          - task: TerraformTaskV4@4
            displayName: 'Terraform Init (for validation)'
            inputs:
              provider: 'azurerm'
              command: 'init'
              workingDirectory: '$(System.DefaultWorkingDirectory)/'
              environmentServiceNameAzureRM: '$(serviceConnection)'
              backendServiceArm: '$(serviceConnection)'
              backendAzureRmResourceGroupName: '$(backendResourceGroup)'
              backendAzureRmStorageAccountName: '$(backendStorageAccount)'
              backendAzureRmContainerName: '$(backendContainer)'
              backendAzureRmKey: '$(backendStateFile)'

          - task: TerraformTaskV4@4
            displayName: 'Terraform Validate'
            inputs:
              provider: 'azurerm'
              command: 'validate'
              workingDirectory: '$(System.DefaultWorkingDirectory)/'
              environmentServiceNameAzureRM: '$(serviceConnection)'

          - task: TerraformTaskV4@4
            displayName: 'Terraform Plan'
            inputs:
              provider: 'azurerm'
              command: 'plan'
              workingDirectory: '$(System.DefaultWorkingDirectory)/'
              commandOptions: '-var-file=terraform.tfvars -out=tfplan.binary'
              environmentServiceNameAzureRM: '$(serviceConnection)'

          - publish: $(System.DefaultWorkingDirectory)
            artifact: terraform-plan-$(Build.BuildId)
            displayName: 'Publish Terraform Plan Artifact'

  # Stage 3: Terraform Apply
  - stage: TerraformApply
    displayName: 'Terraform Apply Stage'
    dependsOn: TerraformValidateAndPlan
    jobs:
      - deployment: Apply
        displayName: 'Terraform Apply Deployment'
        environment: 'dev'  # Define this environment in Azure DevOps Environments
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self

                - task: TerraformInstaller@1
                  displayName: 'Install Terraform'
                  inputs:
                    terraformVersion: 'latest'

                - download: current
                  artifact: terraform-plan-$(Build.BuildId)
                  displayName: 'Download Terraform Plan Artifact'

                - task: TerraformTaskV4@4
                  displayName: 'Terraform Apply'
                  inputs:
                    provider: 'azurerm'
                    command: 'apply'
                    workingDirectory: '$(Pipeline.Workspace)/terraform-plan-$(Build.BuildId)'
                    commandOptions: 'tfplan.binary'
                    environmentServiceNameAzureRM: '$(serviceConnection)'
